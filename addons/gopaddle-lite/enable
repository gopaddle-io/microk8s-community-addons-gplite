#!/usr/bin/env bash

set -e

source $SNAP/actions/common/utils.sh

KUBECTL="$SNAP/kubectl --kubeconfig=${SNAP_DATA}/credentials/client.config"

HELM="$SNAP_DATA/bin/helm3 --kubeconfig=$SNAP_DATA/credentials/client.config"

KUBE_VERSION=$(snap info microk8s | grep installed |xargs| cut -d ' ' -f 2|cut -d 'v' -f 2| cut -d '.' -f 2)

STATIC_VERSION="24"
if [ "$KUBE_VERSION" -gt $STATIC_VERSION ]
then 
   echo "$KUBE_VERSION is not supported"
fi
 

STATICIP=""
HELM_VERSION="4.2.3"
ARGS=$(getopt -a --options i:v: --longoptions "ip:,version:" -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
    -i|--ip)
      STATICIP="$2"
      shift 2;;
    -v|--version)
      HELM_VERSION="$2"
      shift 2;;
    --)
      break;;
  esac
done

PUBLICIP=true
if [ $STATICIP ]
then
   echo "static IP of the microk8s cluster: $STATICIP"
elif $KUBECTL get node -o yaml | grep ExternalIP >/dev/null 2>&1
then 
     echo "Static IP input is not provided. Assuming External IP of the microk8s node for the gopaddle access endpoint."
else
     echo "Static IP input is not provided. External IP is not set for the microk8s node. Assuming Internal IP of the microk8s node for the gopaddle access endpoint."
     PUBLICIP=false
fi

# if $KUBECTL get ns gp-lite >/dev/null 2>&1
# then
#   echo "gopaddle-lite already enabled."
#   exit 0
# fi

do_prerequisites() {
  refresh_opt_in_config "authentication-token-webhook" "true" kubelet
  restart_service kubelet
  # enable helm3 
  "$SNAP/microk8s-enable.wrapper" helm3

  # enable storage
  "$SNAP/microk8s-enable.wrapper" storage

  # enable dns 
  "$SNAP/microk8s-enable.wrapper" dns
}



enable_gopaddle_lite() {

echo "Enabling gopaddle lite"
# download gopaddle-lite helm

# add helm repo
run_with_sudo $HELM repo add gp-lite https://gopaddle-io.github.io/gopaddle-lite

#list helm repo
run_with_sudo $HELM repo update

# create namespace
if $KUBECTL get ns gp-lite >/dev/null 2>&1
then
  echo "gp-lite namespace created."
else
  run_with_sudo $KUBECTL create ns gp-lite
fi

if [ $PUBLICIP == true ]
then
#install rabbitmq
run_with_sudo $HELM install gp-rabbitmq-4-2 gp-lite/gp-lite  --namespace gp-lite  --set global.routingType=NodePortWithOutIngress --set global.installType=public --set global.storageClassName=microk8s-hostpath --set global.gp-rabbitmq.enabled=true --set global.gp-lite-core.enabled=false  --version $HELM_VERSION

#install gp-lite
sleep 1m
run_with_sudo $HELM install gp-core-4-2 gp-lite/gp-lite  --namespace gp-lite  --set global.routingType=NodePortWithOutIngress --set global.installType=public --set global.storageClassName=microk8s-hostpath --set global.cluster.provider=other --set-string global.gopaddle.https=false --set-string global.gopaddleWebhook.https=false --set global.staticIP=$STATICIP  --set global.gp-rabbitmq.enabled=false --set global.gp-lite-core.enabled=true --set global.installSource=microk8s --version $HELM_VERSION
elif [ $PUBLICIP == false ]
then 
#install rabbitmq
run_with_sudo $HELM install gp-rabbitmq-4-2 gp-lite/gp-lite  --namespace gp-lite  --set global.routingType=NodePortWithOutIngress --set global.installType=private --set global.storageClassName=microk8s-hostpath --set global.gp-rabbitmq.enabled=true --set global.gp-lite-core.enabled=false  --version $HELM_VERSION

#install gp-lite
sleep 1m
run_with_sudo $HELM install gp-core-4-2 gp-lite/gp-lite  --namespace gp-lite  --set global.routingType=NodePortWithOutIngress --set global.installType=private --set global.storageClassName=microk8s-hostpath --set global.cluster.provider=other --set-string global.gopaddle.https=false --set-string global.gopaddleWebhook.https=false --set global.staticIP=$STATICIP  --set global.gp-rabbitmq.enabled=false --set global.gp-lite-core.enabled=true --set global.installSource=microk8s --version $HELM_VERSION
fi

echo "Waiting for the gopaddle services to move to running state. This may take a while."

# give some time to create resources in microk8s
sleep 2m

run_with_sudo $KUBECTL wait --for=condition=ready pod -l released-by=gopaddle -n gp-lite --timeout=20m

echo ""
echo ""
echo "gopaddle lite is enabled"
echo ""
echo "gopaddle lite access endpoint"
if [ $STATICIP ]
then
  echo "http://$STATICIP:30003"
elif [ $PUBLICIP == true ]
then 
  IP=$(run_with_sudo $KUBECTL get node -o json| jq '.items[0].status.addresses[]|select(.type=="ExternalIP")|.address')
  ExternalIP=$($IP | cut -d '"' -f 2)
  echo "http://$ExternalIP:30003" 
else
  IP=$(run_with_sudo $KUBECTL get node -o json| jq '.items[0].status.addresses[]|select(.type=="InternalIP")|.address')
  INTERNALIP=$($IP | cut -d '"' -f 2)
  echo "http://$INTERNALIP:30003" 
fi

}


do_prerequisites
enable_gopaddle_lite
